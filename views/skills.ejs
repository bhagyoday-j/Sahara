<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skill Connect - Sahara Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);
            color: #e2e8f0;
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            space-y: 2rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .header-content h1 {
            font-size: 2rem;
            font-weight: bold;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }

        .header-content p {
            color: #94a3b8;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .select {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.5rem;
            padding: 0.5rem 1rem;
            color: #e2e8f0;
            min-width: 120px;
        }

        /* Ensure dropdown options remain readable when native UI uses white backgrounds */
        .select option, select option {
            background: #ffffff;
            color: #000000;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            border: none;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #f97316, #ea580c);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #ea580c, #dc2626);
            transform: translateY(-1px);
        }

        .btn-outline {
            background: transparent;
            border: 1px solid #f97316;
            color: #f97316;
        }

        .btn-outline:hover {
            background: #f97316;
            color: white;
        }

        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }

        .category-card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .category-card:hover {
            transform: scale(1.05);
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1));
        }

        .category-card.active {
            outline: 2px solid #f97316;
            box-shadow: 0 0 0 4px rgba(249, 115, 22, 0.25);
        }

        .category-icon {
            width: 3rem;
            height: 3rem;
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
        }

        .category-icon.construction { background: #f97316; }
        .category-icon.plumbing { background: #3b82f6; }
        .category-icon.electrical { background: #8b5cf6; }
        .category-icon.carpentry { background: #10b981; }
        .category-icon.painting { background: #eab308; }
        .category-icon.cleaning { background: #06b6d4; }

        .action-tabs {
            display: flex;
            gap: 1rem;
            margin: 2rem 0;
        }

        .tab-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: #dc2626;
            color: white;
        }

        .tab-btn.inactive {
            background: rgba(255, 255, 255, 0.1);
            color: #e2e8f0;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .content-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border-radius: 1rem;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .category-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .urgency-critical { background: rgba(220, 38, 38, 0.2); color: #fca5a5; }
        .urgency-high { background: rgba(249, 115, 22, 0.2); color: #fdba74; }
        .urgency-medium { background: rgba(34, 197, 94, 0.2); color: #86efac; }

        .time-posted {
            font-size: 0.75rem;
            color: #94a3b8;
        }

        .worker-name, .job-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }

        .rating {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
        }

        .stars {
            color: #fbbf24;
        }

        .skills {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
        }

        .skill-tag {
            background: rgba(147, 51, 234, 0.2);
            color: #c4b5fd;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
        }

        .card-info {
            margin: 1rem 0;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
            font-size: 0.875rem;
            color: #cbd5e1;
        }

        .card-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .btn-small {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            flex: 1;
        }

        .stats-section {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border-radius: 1rem;
            padding: 2rem;
            margin-top: 3rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stats-title {
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 2rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #f97316;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #94a3b8;
            font-size: 0.875rem;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .header-actions {
                flex-wrap: wrap;
            }

            .categories-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }

            .content-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            margin: 5% auto;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 1rem;
            width: 90%;
            max-width: 600px;
            position: relative;
        }

        .close {
            color: #e2e8f0;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            top: 1rem;
            right: 1.5rem;
        }

        .close:hover {
            color: #f97316;
        }

        .modal h2 {
            color: #e2e8f0;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.5rem;
            background: rgba(255, 255, 255, 0.1);
            color: #e2e8f0;
            font-size: 1rem;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .modal .btn {
            margin-top: 1rem;
            margin-right: 1rem;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                margin: 10% auto;
                width: 95%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
          <div class="header-content">
            <h1>Skill Connect</h1>
            <p>Connect with local skilled workers and find opportunities</p>
          </div>
          <div class="header-actions">
            <button class="btn btn-outline" title="Go Back" onclick="(history.length>1)?history.back():window.location.assign('/')">← Back</button>
            <select class="select">
              <option>Delhi</option>
              <option>Mumbai</option>
              <option>Bangalore</option>
              <option>Chennai</option>
            </select>
            <button class="btn btn-primary" onclick="openModal('servicesModal')">
              <span>+</span>
              Post Services
            </button>
            <button class="btn btn-outline" onclick="openModal('jobModal')">
              <span>+</span>
              Post Job Request
            </button>
          </div>
        </div>

        <!-- Categories -->
        <div class="categories-grid">
            <div class="category-card" role="button" tabindex="0" data-category="Construction" onclick="filterCategory('Construction')">
                <div class="category-icon construction">🏗️</div>
                <h3>Construction</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Construction">0</span> workers</p>
            </div>
            <div class="category-card" role="button" tabindex="0" data-category="Plumbing" onclick="filterCategory('Plumbing')">
                <div class="category-icon plumbing">🔧</div>
                <h3>Plumbing</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Plumbing">0</span> workers</p>
            </div>
            <div class="category-card" role="button" tabindex="0" data-category="Electrical" onclick="filterCategory('Electrical')">
                <div class="category-icon electrical">⚡</div>
                <h3>Electrical</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Electrical">0</span> workers</p>
            </div>
            <div class="category-card" role="button" tabindex="0" data-category="Carpentry" onclick="filterCategory('Carpentry')">
                <div class="category-icon carpentry">🪚</div>
                <h3>Carpentry</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Carpentry">0</span> workers</p>
            </div>
            <div class="category-card" role="button" tabindex="0" data-category="Painting" onclick="filterCategory('Painting')">
                <div class="category-icon painting">🎨</div>
                <h3>Painting</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Painting">0</span> workers</p>
            </div>
            <div class="category-card" role="button" tabindex="0" data-category="Cleaning" onclick="filterCategory('Cleaning')">
                <div class="category-icon cleaning">🧹</div>
                <h3>Cleaning</h3>
                <p style="font-size: 0.75rem; color: #94a3b8;"> <span id="cat-Cleaning">0</span> workers</p>
            </div>
        </div>

        <!-- Action Tabs -->
        <div class="action-tabs">
            <button class="tab-btn active">Need Worker (<span id="tab-jobs-count">0</span>)</button>
            <button class="tab-btn inactive">Available Workers (<span id="tab-services-count">0</span>)</button>
        </div>

        <!-- Dynamic content from backend (Jobs + Services) -->
        <div id="dynContent" class="content-grid"></div>

        <!-- Job Requests (static demo hidden) -->
        <div class="content-grid" style="display:none">
            <div class="card" data-category="Construction">
                <div class="card-header">
                    <div class="category-badge urgency-high">
                        🏗️ Construction
                    </div>
                    <div class="time-posted">8 min ago</div>
                </div>

                <h3 class="job-title">Need experienced mason for house construction</h3>
                <p style="margin: 0.5rem 0; color: #cbd5e1;">Building a 2-story house. Need skilled mason for brickwork and concrete work.</p>
                
                <div class="card-info">
                    <div class="info-item">
                        <span>👤</span>
                        <span>Sharma Family</span>
                    </div>
                    <div class="info-item">
                        <span>📍</span>
                        <span>Dwarka, Delhi</span>
                    </div>
                    <div class="info-item">
                        <span>⏱️</span>
                        <span>2 weeks</span>
                    </div>
                    <div class="info-item">
                        <span>💰</span>
                        <span>₹1000/day</span>
                    </div>
                </div>

                <div class="skills">
                    <span class="skill-tag">10+ years experience</span>
                    <span class="skill-tag">Own tools</span>
                    <span class="skill-tag">Available full-time</span>
                </div>

                <div class="card-actions">
                    <button class="btn btn-primary btn-small">I Can Help</button>
                    <button class="btn btn-outline btn-small">View Details</button>
                </div>
            </div>

            <div class="card" data-category="Plumbing">
                <div class="card-header">
                    <div class="category-badge urgency-critical">
                        🔧 Plumbing
                    </div>
                    <div class="time-posted">3 min ago</div>
                </div>

                <h3 class="job-title">Urgent plumber needed for water pipe burst</h3>
                <p style="margin: 0.5rem 0; color: #cbd5e1;">Main water pipe burst in house. Need immediate repair to prevent flooding.</p>
                
                <div class="card-info">
                    <div class="info-item">
                        <span>👤</span>
                        <span>Gupta Residence</span>
                    </div>
                    <div class="info-item">
                        <span>📍</span>
                        <span>Lajpat Nagar, Delhi</span>
                    </div>
                    <div class="info-item">
                        <span>⏱️</span>
                        <span>Same day</span>
                    </div>
                    <div class="info-item">
                        <span>💰</span>
                        <span>₹1500 (Emergency)</span>
                    </div>
                </div>

                <div class="skills">
                    <span class="skill-tag">Emergency available</span>
                    <span class="skill-tag">Own equipment</span>
                    <span class="skill-tag">Pipe repair expert</span>
                </div>

                <div class="card-actions">
                    <button class="btn btn-primary btn-small">I Can Help</button>
                    <button class="btn btn-outline btn-small">View Details</button>
                </div>
            </div>

            <div class="card" data-category="Electrical">
                <div class="card-header">
                    <div class="category-badge urgency-medium">
                        ⚡ Electrical
                    </div>
                    <div class="time-posted">45 min ago</div>
                </div>

                <h3 class="job-title">Electrician for office wiring renovation</h3>
                <p style="margin: 0.5rem 0; color: #cbd5e1;">Complete rewiring of 3000 sq ft office space. Modern electrical setup required.</p>
                
                <div class="card-info">
                    <div class="info-item">
                        <span>👤</span>
                        <span>Tech Solutions Pvt Ltd</span>
                    </div>
                    <div class="info-item">
                        <span>📍</span>
                        <span>Connaught Place, Delhi</span>
                    </div>
                    <div class="info-item">
                        <span>⏱️</span>
                        <span>1 week</span>
                    </div>
                    <div class="info-item">
                        <span>💰</span>
                        <span>₹800/day</span>
                    </div>
                </div>

                <div class="skills">
                    <span class="skill-tag">Commercial experience</span>
                    <span class="skill-tag">Safety certified</span>
                    <span class="skill-tag">Team work</span>
                </div>

                <div class="card-actions">
                    <button class="btn btn-primary btn-small">I Can Help</button>
                    <button class="btn btn-outline btn-small">View Details</button>
                </div>
            </div>

            <div class="card" data-category="Carpentry">
                <div class="card-header">
                    <div class="category-badge urgency-medium">
                        🪚 Carpentry
                    </div>
                    <div class="time-posted">2 hours ago</div>
                </div>

                <h3 class="job-title">Carpenter for custom furniture making</h3>
                <p style="margin: 0.5rem 0; color: #cbd5e1;">Making custom wardrobes, tables and chairs for residential project.</p>
                
                <div class="card-info">
                    <div class="info-item">
                        <span>👤</span>
                        <span>Interior Design Studio</span>
                    </div>
                    <div class="info-item">
                        <span>📍</span>
                        <span>Nehru Place, Delhi</span>
                    </div>
                    <div class="info-item">
                        <span>⏱️</span>
                        <span>3 weeks</span>
                    </div>
                    <div class="info-item">
                        <span>💰</span>
                        <span>₹750/day</span>
                    </div>
                </div>

                <div class="skills">
                    <span class="skill-tag">Custom furniture experience</span>
                    <span class="skill-tag">Quality finishing</span>
                    <span class="skill-tag">Design reading</span>
                </div>

                <div class="card-actions">
                    <button class="btn btn-primary btn-small">I Can Help</button>
                    <button class="btn btn-outline btn-small">View Details</button>
                </div>
            </div>
        </div>

        <!-- Stats Section -->
        <div class="stats-section">
            <h2 class="stats-title">Platform Statistics</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="sk-stat-workers">0</div>
                    <div class="stat-label">Active Skilled Workers</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="sk-stat-completed">0</div>
                    <div class="stat-label">Jobs Completed</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number"><span id="sk-stat-avg">0.0</span> min</div>
                    <div class="stat-label">Avg Response Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="sk-stat-cities">0</div>
                    <div class="stat-label">Cities Covered</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Post Services Modal -->
    <div id="servicesModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('servicesModal')">&times;</span>
            <h2>Post Your Services</h2>
            <form id="servicesForm">
                <div class="form-group">
                    <label for="workerName">Your Name</label>
                    <input type="text" id="workerName" name="workerName" required>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="workerCategory">Category</label>
                        <select id="workerCategory" name="workerCategory" required>
                            <option value="">Select Category</option>
                            <option value="🏗️ Construction">🏗️ Construction</option>
                            <option value="🔧 Plumbing">🔧 Plumbing</option>
                            <option value="⚡ Electrical">⚡ Electrical</option>
                            <option value="🪚 Carpentry">🪚 Carpentry</option>
                            <option value="🎨 Painting">🎨 Painting</option>
                            <option value="🧹 Cleaning">🧹 Cleaning</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="workerLocation">Location</label>
                        <input type="text" id="workerLocation" name="workerLocation" placeholder="e.g., Dwarka, Delhi" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="workerExperience">Experience (years)</label>
                        <input type="number" id="workerExperience" name="workerExperience" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="workerRate">Daily Rate (₹)</label>
                        <input type="number" id="workerRate" name="workerRate" min="100" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="workerSkills">Skills (comma separated)</label>
                    <input type="text" id="workerSkills" name="workerSkills" placeholder="e.g., Residential, Commercial, Own tools" required>
                </div>

                <div class="form-group">
                    <label for="workerDescription">Description</label>
                    <textarea id="workerDescription" name="workerDescription" placeholder="Describe your experience and services..." required></textarea>
                </div>

                <button type="submit" class="btn btn-primary">Post Services</button>
                <button type="button" class="btn btn-outline" onclick="closeModal('servicesModal')">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Post Job Request Modal -->
    <div id="jobModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('jobModal')">&times;</span>
            <h2>Post Job Request</h2>
            <form id="jobForm">
                <div class="form-group">
                    <label for="jobTitle">Job Title</label>
                    <input type="text" id="jobTitle" name="jobTitle" placeholder="e.g., Need experienced mason for house construction" required>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="jobCategory">Category</label>
                        <select id="jobCategory" name="jobCategory" required>
                            <option value="">Select Category</option>
                            <option value="🏗️ Construction">🏗️ Construction</option>
                            <option value="🔧 Plumbing">🔧 Plumbing</option>
                            <option value="⚡ Electrical">⚡ Electrical</option>
                            <option value="🪚 Carpentry">🪚 Carpentry</option>
                            <option value="🎨 Painting">🎨 Painting</option>
                            <option value="🧹 Cleaning">🧹 Cleaning</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="jobUrgency">Urgency</label>
                        <select id="jobUrgency" name="jobUrgency" required>
                            <option value="">Select Urgency</option>
                            <option value="urgency-critical">Critical</option>
                            <option value="urgency-high">High</option>
                            <option value="urgency-medium">Medium</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="jobEmployer">Your Name/Company</label>
                        <input type="text" id="jobEmployer" name="jobEmployer" placeholder="e.g., Sharma Family" required>
                    </div>
                    <div class="form-group">
                        <label for="jobLocation">Location</label>
                        <input type="text" id="jobLocation" name="jobLocation" placeholder="e.g., Dwarka, Delhi" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="jobDuration">Duration</label>
                        <input type="text" id="jobDuration" name="jobDuration" placeholder="e.g., 2 weeks, Same day" required>
                    </div>
                    <div class="form-group">
                        <label for="jobBudget">Budget (₹/day)</label>
                        <input type="number" id="jobBudget" name="jobBudget" min="100" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="jobRequirements">Requirements (comma separated)</label>
                    <input type="text" id="jobRequirements" name="jobRequirements" placeholder="e.g., 10+ years experience, Own tools, Available full-time" required>
                </div>

                <div class="form-group">
                    <label for="jobDescription">Job Description</label>
                    <textarea id="jobDescription" name="jobDescription" placeholder="Describe the job requirements and details..." required></textarea>
                </div>

                <button type="submit" class="btn btn-primary">Post Job Request</button>
                <button type="button" class="btn btn-outline" onclick="closeModal('jobModal')">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Details Modal -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('detailsModal')">&times;</span>
            <h2 id="detailsTitle">Details</h2>
            <div id="detailsBody" class="card-info"></div>
        </div>
    </div>

    <script>
        window.currentUser = '<%= (user||"\u0000").toString().replace("\u0000", "") %>';
        // Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            // Reset form
            const form = document.getElementById(modalId).querySelector('form');
            if (form) form.reset();
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Generate random rating
        function generateRating() {
            return (Math.random() * (5 - 3.5) + 3.5).toFixed(1);
        }

        // Generate random time ago
        function generateTimeAgo() {
            const times = ['Just now', '2 min ago', '5 min ago', '15 min ago', '30 min ago', '1 hour ago'];
            return times[Math.floor(Math.random() * times.length)];
        }

        // Filter by top category cards
        function filterCategory(category) {
            // Toggle active style on category cards
            const catCards = document.querySelectorAll('.categories-grid .category-card');
            catCards.forEach(el => {
                if (el.getAttribute('data-category') === category) {
                    el.classList.add('active');
                } else {
                    el.classList.remove('active');
                }
            });

        // ================= Backend wiring =================
        document.addEventListener('DOMContentLoaded', initSkills);

        async function initSkills(){
            await loadSkillsData();
        }

        async function loadSkillsData(){
            try{
                const [jobsRes, servicesRes] = await Promise.all([
                    fetch('/skills/jobs', { credentials:'same-origin' }),
                    fetch('/skills/services', { credentials:'same-origin' })
                ]);
                const jobs = jobsRes.ok ? await jobsRes.json() : [];
                const services = servicesRes.ok ? await servicesRes.json() : [];
                const wrap = document.getElementById('dynContent');
                wrap.innerHTML = '';
                jobs.forEach(j => wrap.insertAdjacentHTML('beforeend', renderJobCard(j)));
                services.forEach(s => wrap.insertAdjacentHTML('beforeend', renderServiceCard(s)));

                // Update tab totals
                const tabJobs = document.getElementById('tab-jobs-count');
                if (tabJobs) tabJobs.textContent = (jobs.length||0).toString();
                const tabServices = document.getElementById('tab-services-count');
                if (tabServices) tabServices.textContent = (services.length||0).toString();

                // Compute per-category worker counts from services
                const cats = ['Construction','Plumbing','Electrical','Carpentry','Painting','Cleaning'];
                const counts = Object.fromEntries(cats.map(c=>[c,0]));
                const norm = (v)=>{
                    const s = String(v||'');
                    return s.replace(/^[^A-Za-z0-9]+\s*/, '').trim();
                };
                services.forEach(s=>{
                    const c = norm(s.category);
                    if (counts[c] !== undefined) counts[c]++;
                });
                cats.forEach(c=>{
                    const el = document.getElementById('cat-' + c);
                    if (el) el.textContent = counts[c] || 0;
                });
            }catch(e){ /* ignore */ }
        }

        function isOwner(owner){
            const me = (window.currentUser||'').toLowerCase();
            return me && owner && me === String(owner).toLowerCase();
        }

        function escapeHtml(str){
            return String(str||'').replace(/[&<>"]+/g, s=>({
                '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'
            })[s]||s);
        }

        function timeAgo(date){
            const diff = Math.floor((Date.now()-date.getTime())/1000);
            if(diff<60) return diff+"s ago";
            const m=Math.floor(diff/60); if(m<60) return m+" min ago";
            const h=Math.floor(m/60); return h+" hr ago";
        }

        function renderJobCard(j){
            const owner = j.ownerUsername;
            const canHelp = !isOwner(owner);
            return `
            <div class="card" data-type="job" data-id="${j._id}">
                <div class="card-header">
                    <div class="category-badge ${escapeHtml(j.urgency||'urgency-medium')}"> ${escapeHtml(j.category||'')} </div>
                    <div class="time-posted">${timeAgo(new Date(j.createdAt||Date.now()))}</div>
                </div>
                <h3 class="job-title">${escapeHtml(j.title||'')}</h3>
                <p style="margin: 0.5rem 0; color: #cbd5e1;">${escapeHtml(j.description||'')}</p>
                <div class="card-info">
                    <div class="info-item"><span>👤</span><span>${escapeHtml(j.employer||'')}</span></div>
                    <div class="info-item"><span>📍</span><span>${escapeHtml(j.location||'')}</span></div>
                    <div class="info-item"><span>⏱️</span><span>${escapeHtml(j.duration||'')}</span></div>
                    <div class="info-item"><span>💰</span><span>₹${Number(j.budget||0)}</span></div>
                </div>
                <div class="card-actions">
                    ${canHelp ? `<button class="btn btn-primary btn-small" onclick="helpJob('${j._id}')">I Can Help</button>` : ''}
                    <button class="btn btn-outline btn-small" onclick="viewJobDetails('${j._id}')">View Details</button>
                    ${isOwner(owner) ? `<button class="btn btn-outline btn-small" onclick="deleteJob('${j._id}')">Delete</button>` : ''}
                </div>
            </div>`;
        }

        function renderServiceCard(s){
            const owner = s.ownerUsername;
            const canHelp = !isOwner(owner);
            const skills = Array.isArray(s.skills)? s.skills.join(', ') : '';
            return `
            <div class="card" data-type="service" data-id="${s._id}">
                <div class="card-header">
                    <div class="category-badge urgency-medium"> ${escapeHtml(s.category||'')} </div>
                    <div class="time-posted">${timeAgo(new Date(s.createdAt||Date.now()))}</div>
                </div>
                <h3 class="worker-name">${escapeHtml(s.workerName||'')}</h3>
                <div class="card-info">
                    <div class="info-item"><span>📍</span><span>${escapeHtml(s.location||'')}</span></div>
                    <div class="info-item"><span>🛠️</span><span>${escapeHtml(skills)}</span></div>
                    <div class="info-item"><span>💼</span><span>${Number(s.experience||0)} yrs</span></div>
                    <div class="info-item"><span>💰</span><span>₹${Number(s.rate||0)}/day</span></div>
                </div>
                <div class="card-actions">
                    ${canHelp ? `<button class="btn btn-primary btn-small" onclick="helpService('${s._id}')">I Can Help</button>` : ''}
                    <button class="btn btn-outline btn-small" onclick="viewServiceDetails('${s._id}')">View Details</button>
                    ${isOwner(owner) ? `<button class="btn btn-outline btn-small" onclick="deleteService('${s._id}')">Delete</button>` : ''}
                </div>
            </div>`;
        }

        async function viewJobDetails(id){
            try{
                const res = await fetch('/skills/jobs/'+id, { credentials:'same-origin' });
                if(!res.ok) return;
                const data = await res.json();
                const o = data.owner || {};
                document.getElementById('detailsTitle').textContent = 'Job Details';
                document.getElementById('detailsBody').innerHTML = `
                    <div class="info-item"><span>👤</span><span>${escapeHtml(o.name||'')}</span></div>
                    <div class="info-item"><span>📧</span><span>${escapeHtml(o.email||'')}</span></div>
                    <div class="info-item"><span>📞</span><span>${escapeHtml(o.phone||'')}</span></div>
                    <div class="info-item"><span>📝</span><span>${escapeHtml(o.bio||'')}</span></div>
                    ${o.resume? `<div class="info-item"><span>📄</span><a href="${o.resume}" target="_blank">View Resume</a></div>`:''}
                `;
                openModal('detailsModal');
            }catch(e){ /* ignore */ }
        }

        async function viewServiceDetails(id){
            try{
                const res = await fetch('/skills/services/'+id, { credentials:'same-origin' });
                if(!res.ok) return;
                const data = await res.json();
                const o = data.owner || {};
                document.getElementById('detailsTitle').textContent = 'Service Details';
                const resumeLink = o.resume ? `<div class="info-item"><span>📄</span><a href="${o.resume}" target="_blank" download>Download Resume</a></div>` : '';
                const exportBtn = `<div class="info-item"><button class="btn btn-outline btn-small" onclick="downloadVCard({name: '${(o.name||'').replace(/'/g,"&#39;")}', email: '${(o.email||'').replace(/'/g,"&#39;")}', phone: '${(o.phone||'').replace(/'/g,"&#39;")}', bio: '${(o.bio||'').replace(/'/g,"&#39;")}'})">Export vCard</button></div>`;
                document.getElementById('detailsBody').innerHTML = `
                    <div class="info-item"><span>👤</span><span>${escapeHtml(o.name||'')}</span></div>
                    <div class="info-item"><span>📧</span><span>${escapeHtml(o.email||'')}</span></div>
                    <div class="info-item"><span>📞</span><span>${escapeHtml(o.phone||'')}</span></div>
                    <div class="info-item"><span>📝</span><span>${escapeHtml(o.bio||'')}</span></div>
                    ${resumeLink}
                    ${exportBtn}
                `;
                openModal('detailsModal');
            }catch(e){ /* ignore */ }
        }

        async function helpJob(id){
            const contact = prompt('Enter your contact (phone/email/other) to share with the poster:');
            if(!contact) return;
            try{
                const res = await fetch('/skills/jobs/'+id+'/help', { method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body: JSON.stringify({ contact }) });
                if(!res.ok){ const err = await res.json().catch(()=>({error:'Failed'})); alert(err.error||'Failed'); return; }
                alert('Your contact has been shared. Thank you!');
            }catch(e){ alert('Network error'); }
        }

        async function helpService(id){
            const contact = prompt('Enter your contact (phone/email/other) to share with the poster:');
            if(!contact) return;
            try{
                const res = await fetch('/skills/services/'+id+'/help', { method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body: JSON.stringify({ contact }) });
                if(!res.ok){ const err = await res.json().catch(()=>({error:'Failed'})); alert(err.error||'Failed'); return; }
                alert('Your contact has been shared. Thank you!');
            }catch(e){ alert('Network error'); }
        }

        async function deleteJob(id){
            if(!confirm('Delete this job post?')) return;
            try{
                const res = await fetch('/skills/jobs/'+id, { method:'DELETE', credentials:'same-origin' });
                if(res.status===204){ const el=document.querySelector(`[data-type="job"][data-id="${id}"]`); if(el&&el.parentNode) el.parentNode.removeChild(el); }
                else { const err = await res.json().catch(()=>({error:'Failed'})); alert(err.error||'Failed to delete'); }
            }catch(e){ alert('Network error'); }
        }

        async function deleteService(id){
            if(!confirm('Delete this service post?')) return;
            try{
                const res = await fetch('/skills/services/'+id, { method:'DELETE', credentials:'same-origin' });
                if(res.status===204){ const el=document.querySelector(`[data-type="service"][data-id="${id}"]`); if(el&&el.parentNode) el.parentNode.removeChild(el); }
                else { const err = await res.json().catch(()=>({error:'Failed'})); alert(err.error||'Failed to delete'); }
            }catch(e){ alert('Network error'); }
        }

            // Show only matching job cards
            const jobCards = document.querySelectorAll('.content-grid .card');
            jobCards.forEach(card => {
                const c = card.getAttribute('data-category') || '';
                card.style.display = (c === category) ? '' : 'none';
            });
        }

        // Handle Services Form Submission -> persist to backend, then reload
        document.getElementById('servicesForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const payload = {
                workerName: formData.get('workerName'),
                category: formData.get('workerCategory'),
                location: formData.get('workerLocation'),
                experience: Number(formData.get('workerExperience')),
                rate: Number(formData.get('workerRate')),
                skills: String(formData.get('workerSkills')||'').split(',').map(s=>s.trim()).filter(Boolean),
                description: formData.get('workerDescription')
            };
            try{
                const res = await fetch('/skills/services', {
                    method:'POST',
                    headers:{ 'Content-Type':'application/json' },
                    credentials:'same-origin',
                    body: JSON.stringify(payload)
                });
                if(res.status === 401){
                    alert('Please login to post your services.');
                    window.location.href = '/login';
                    return;
                }
                if(!res.ok){
                    const err = await res.json().catch(()=>({error:'Failed to create'}));
                    alert(err.error||'Failed to create');
                    return;
                }
                closeModal('servicesModal');
                await loadSkillsData();
            }catch(err){
                alert('Network error');
            }
        });

        // Handle Job Request Form Submission -> optional: persist, then reload
        document.getElementById('jobForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const payload = {
                title: formData.get('jobTitle'),
                category: formData.get('jobCategory'),
                employer: formData.get('jobEmployer'),
                location: formData.get('jobLocation'),
                urgency: formData.get('jobUrgency'),
                duration: formData.get('jobDuration'),
                budget: Number(formData.get('jobBudget')),
                requirements: String(formData.get('jobRequirements')||'').split(',').map(s=>s.trim()).filter(Boolean),
                description: formData.get('jobDescription')
            };
            try{
                const res = await fetch('/skills/jobs', {
                    method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body: JSON.stringify(payload)
                });
                if(res.status===401){ alert('Please login to post a job request.'); window.location.href='/login'; return; }
                if(!res.ok){ const err=await res.json().catch(()=>({error:'Failed to create'})); alert(err.error||'Failed to create'); return; }
                closeModal('jobModal');
                await loadSkillsData();
            }catch(err){ alert('Network error'); }
        });

        function downloadVCard({ name, email, phone, bio }){
            const vcard = `BEGIN:VCARD\nVERSION:3.0\nFN:${name||''}\nEMAIL:${email||''}\nTEL:${phone||''}\nNOTE:${bio||''}\nEND:VCARD`;
            const blob = new Blob([vcard], { type: 'text/vcard;charset=utf-8' });
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = 'resume.vcf';
            document.body.appendChild(a);
            a.click();
            URL.revokeObjectURL(a.href);
            a.remove();
        }

        // Tab switching functionality
        document.addEventListener('DOMContentLoaded', function() {
            const tabButtons = document.querySelectorAll('.tab-btn');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active/inactive classes
                    tabButtons.forEach(btn => {
                        btn.classList.remove('active', 'inactive');
                        btn.classList.add(btn === this ? 'active' : 'inactive');
                    });
                    
                    // Here you could add logic to show/hide different content
                    // For now, we'll keep all cards visible
                });
            });
        });
    </script>
</body>
</html>